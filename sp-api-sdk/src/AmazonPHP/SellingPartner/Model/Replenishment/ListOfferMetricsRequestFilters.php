<?php

declare(strict_types=1);

namespace AmazonPHP\SellingPartner\Model\Replenishment;

use AmazonPHP\SellingPartner\Exception\AssertionException;
use AmazonPHP\SellingPartner\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * Selling Partner API for Uploads.
 *
 * The Uploads API lets you upload files that you can programmatically access using other Selling Partner APIs, such as the A+ Content API and the Messaging API.
 *
 * The version of the OpenAPI document: 2020-11-01
 *
 * This class was auto-generated by https://openapi-generator.tech
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 *
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ListOfferMetricsRequestFilters implements \ArrayAccess, \JsonSerializable, \Stringable, ModelInterface
{
    final public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'ListOfferMetricsRequestFilters';
    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'aggregation_frequency' => 'string',
        'time_interval' => 'TimeInterval',
        'time_period_type' => 'string',
        'marketplace_id' => 'string',
        'program_types' => 'string[]',
        'asins' => 'string[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'aggregation_frequency' => null,
        'time_interval' => null,
        'time_period_type' => null,
        'marketplace_id' => null,
        'program_types' => null,
        'asins' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'aggregation_frequency' => 'aggregationFrequency',
        'time_interval' => 'timeInterval',
        'time_period_type' => 'timePeriodType',
        'marketplace_id' => 'marketplaceId',
        'program_types' => 'programTypes',
        'asins' => 'asins',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'aggregation_frequency' => 'setAggregationFrequency',
        'time_interval' => 'setTimeInterval',
        'time_period_type' => 'setTimePeriodType',
        'marketplace_id' => 'setMarketplaceId',
        'program_types' => 'setProgramTypes',
        'asins' => 'setAsins',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'aggregation_frequency' => 'getAggregationFrequency',
        'time_interval' => 'getTimeInterval',
        'time_period_type' => 'getTimePeriodType',
        'marketplace_id' => 'getMarketplaceId',
        'program_types' => 'getProgramTypes',
        'asins' => 'getAsins',
    ];


    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aggregation_frequency'] = $data['aggregation_frequency'] ?? null;
        $this->container['time_interval'] = $data['time_interval'] ?? null;
        $this->container['time_period_type'] = $data['time_period_type'] ?? null;
        $this->container['marketplace_id'] = $data['marketplace_id'] ?? null;
        $this->container['program_types'] = $data['program_types'] ?? null;
        $this->container['asins'] = $data['asins'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return (string) \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate(): void {}


    // Getters
    public function getAggregationFrequency(): ?string
    {
        return $this->container['aggregation_frequency'] ?? null;
    }

    public function getTimeInterval(): TimeInterval
    {
        return $this->container['time_interval'];
    }

    public function getTimePeriodType(): string
    {
        return $this->container['time_period_type'];
    }

    public function getMarketplaceId(): string
    {
        return $this->container['marketplace_id'];
    }

    public function getProgramTypes(): array
    {
        return $this->container['program_types'];
    }

    public function getAsins(): ?array
    {
        return $this->container['asins'] ?? null;
    }

    // Setters
    public function setAggregationFrequency(?string $value): void
    {
        $this->container['aggregation_frequency'] = $value;
    }

    public function setTimeInterval(TimeInterval $value): void
    {
        $this->container['time_interval'] = $value;
    }

    public function setTimePeriodType(string $value): void
    {
        $this->container['time_period_type'] = $value;
    }

    public function setMarketplaceId(string $value): void
    {
        $this->container['marketplace_id'] = $value;
    }

    public function setProgramTypes(array $value): void
    {
        $this->container['program_types'] = $value;
    }

    public function setAsins(?array $value): void
    {
        $this->container['asins'] = $value;
    }


    /**
     * Returns true if offset exists. False otherwise.
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     */
    public function offsetSet($offset, $value): void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
