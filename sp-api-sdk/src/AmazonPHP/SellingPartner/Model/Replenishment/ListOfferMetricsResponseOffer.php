<?php

declare(strict_types=1);

namespace AmazonPHP\SellingPartner\Model\Replenishment;

use AmazonPHP\SellingPartner\Exception\AssertionException;
use AmazonPHP\SellingPartner\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * Selling Partner API for Uploads.
 *
 * The Uploads API lets you upload files that you can programmatically access using other Selling Partner APIs, such as the A+ Content API and the Messaging API.
 *
 * The version of the OpenAPI document: 2020-11-01
 *
 * This class was auto-generated by https://openapi-generator.tech
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 *
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ListOfferMetricsResponseOffer implements \ArrayAccess, \JsonSerializable, \Stringable, ModelInterface
{
    final public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'ListOfferMetricsResponseOffer';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'asin' => 'string',
        'not_delivered_due_to_oos' => 'double',
        'total_subscriptions_revenue' => 'double',
        'shipped_subscription_units' => 'int64',
        'active_subscriptions' => 'int64',
        'revenue_penetration' => 'double',
        'lost_revenue_due_to_oos' => 'double',
        'coupons_revenue_penetration' => 'double',
        'share_of_coupon_subscriptions' => 'double',
        'next_30_day_total_subscriptions_revenue' => 'double',
        'next_60_day_total_subscriptions_revenue' => 'double',
        'next_90_day_total_subscriptions_revenue' => 'double',
        'next_30_day_shipped_subscription_units' => 'int64',
        'next_60_day_shipped_subscription_units' => 'int64',
        'next_90_day_shipped_subscription_units' => 'int64',
        'time_interval' => '\AmazonPHP\SellingPartner\Model\Replenishment\TimeInterval',
        'currency_code' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'asin' => null,
        'not_delivered_due_to_oos' => 'double',
        'total_subscriptions_revenue' => 'double',
        'shipped_subscription_units' => 'int64',
        'active_subscriptions' => 'int64',
        'revenue_penetration' => 'double',
        'lost_revenue_due_to_oos' => 'double',
        'coupons_revenue_penetration' => 'double',
        'share_of_coupon_subscriptions' => 'double',
        'next_30_day_total_subscriptions_revenue' => 'double',
        'next_60_day_total_subscriptions_revenue' => 'double',
        'next_90_day_total_subscriptions_revenue' => 'double',
        'next_30_day_shipped_subscription_units' => 'int64',
        'next_60_day_shipped_subscription_units' => 'int64',
        'next_90_day_shipped_subscription_units' => 'int64',
        'time_interval' => null,
        'currency_code' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'asin' => 'asin',
        'not_delivered_due_to_oos' => 'notDeliveredDueToOOS',
        'total_subscriptions_revenue' => 'totalSubscriptionsRevenue',
        'shipped_subscription_units' => 'shippedSubscriptionUnits',
        'active_subscriptions' => 'activeSubscriptions',
        'revenue_penetration' => 'revenuePenetration',
        'lost_revenue_due_to_oos' => 'lostRevenueDueToOOS',
        'coupons_revenue_penetration' => 'couponsRevenuePenetration',
        'share_of_coupon_subscriptions' => 'shareOfCouponSubscriptions',
        'next_30_day_total_subscriptions_revenue' => 'next30DayTotalSubscriptionsRevenue',
        'next_60_day_total_subscriptions_revenue' => 'next60DayTotalSubscriptionsRevenue',
        'next_90_day_total_subscriptions_revenue' => 'next90DayTotalSubscriptionsRevenue',
        'next_30_day_shipped_subscription_units' => 'next30DayShippedSubscriptionUnits',
        'next_60_day_shipped_subscription_units' => 'next60DayShippedSubscriptionUnits',
        'next_90_day_shipped_subscription_units' => 'next90DayShippedSubscriptionUnits',
        'time_interval' => 'timeInterval',
        'currency_code' => 'currencyCode',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'asin' => 'setAsin',
        'not_delivered_due_to_oos' => 'setNotDeliveredDueToOOS',
        'total_subscriptions_revenue' => 'setTotalSubscriptionsRevenue',
        'shipped_subscription_units' => 'setShippedSubscriptionUnits',
        'active_subscriptions' => 'setActiveSubscriptions',
        'revenue_penetration' => 'setRevenuePenetration',
        'lost_revenue_due_to_oos' => 'setLostRevenueDueToOOS',
        'coupons_revenue_penetration' => 'setCouponsRevenuePenetration',
        'share_of_coupon_subscriptions' => 'setShareOfCouponSubscriptions',
        'next_30_day_total_subscriptions_revenue' => 'setNext30DayTotalSubscriptionsRevenue',
        'next_60_day_total_subscriptions_revenue' => 'setNext60DayTotalSubscriptionsRevenue',
        'next_90_day_total_subscriptions_revenue' => 'setNext90DayTotalSubscriptionsRevenue',
        'next_30_day_shipped_subscription_units' => 'setNext30DayShippedSubscriptionUnits',
        'next_60_day_shipped_subscription_units' => 'setNext60DayShippedSubscriptionUnits',
        'next_90_day_shipped_subscription_units' => 'setNext90DayShippedSubscriptionUnits',
        'time_interval' => 'setTimeInterval',
        'currency_code' => 'setCurrencyCode',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'asin' => 'getAsin',
        'not_delivered_due_to_oos' => 'getNotDeliveredDueToOOS',
        'total_subscriptions_revenue' => 'getTotalSubscriptionsRevenue',
        'shipped_subscription_units' => 'getShippedSubscriptionUnits',
        'active_subscriptions' => 'getActiveSubscriptions',
        'revenue_penetration' => 'getRevenuePenetration',
        'lost_revenue_due_to_oos' => 'getLostRevenueDueToOOS',
        'coupons_revenue_penetration' => 'getCouponsRevenuePenetration',
        'share_of_coupon_subscriptions' => 'getShareOfCouponSubscriptions',
        'next_30_day_total_subscriptions_revenue' => 'getNext30DayTotalSubscriptionsRevenue',
        'next_60_day_total_subscriptions_revenue' => 'getNext60DayTotalSubscriptionsRevenue',
        'next_90_day_total_subscriptions_revenue' => 'getNext90DayTotalSubscriptionsRevenue',
        'next_30_day_shipped_subscription_units' => 'getNext30DayShippedSubscriptionUnits',
        'next_60_day_shipped_subscription_units' => 'getNext60DayShippedSubscriptionUnits',
        'next_90_day_shipped_subscription_units' => 'getNext90DayShippedSubscriptionUnits',
        'time_interval' => 'getTimeInterval',
        'currency_code' => 'getCurrencyCode',
    ];


    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|mixed[] $data Associated array of property values
     *                           initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['offers'] = $data['offers'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }


    // Getters
    public function getAsin(): ?string
    {
        return $this->container['asin'] ?? null;
    }

    public function getNotDeliveredDueToOOS(): ?float
    {
        return $this->container['not_delivered_due_to_oos'] ?? null;
    }

    public function getTotalSubscriptionsRevenue(): ?float
    {
        return $this->container['total_subscriptions_revenue'] ?? null;
    }

    public function getShippedSubscriptionUnits(): ?int
    {
        return $this->container['shipped_subscription_units'] ?? null;
    }

    public function getActiveSubscriptions(): ?int
    {
        return $this->container['active_subscriptions'] ?? null;
    }

    public function getRevenuePenetration(): ?float
    {
        return $this->container['revenue_penetration'] ?? null;
    }

    public function getLostRevenueDueToOOS(): ?float
    {
        return $this->container['lost_revenue_due_to_oos'] ?? null;
    }

    public function getCouponsRevenuePenetration(): ?float
    {
        return $this->container['coupons_revenue_penetration'] ?? null;
    }

    public function getShareOfCouponSubscriptions(): ?float
    {
        return $this->container['share_of_coupon_subscriptions'] ?? null;
    }

    public function getNext30DayTotalSubscriptionsRevenue(): ?float
    {
        return $this->container['next_30_day_total_subscriptions_revenue'] ?? null;
    }

    public function getNext60DayTotalSubscriptionsRevenue(): ?float
    {
        return $this->container['next_60_day_total_subscriptions_revenue'] ?? null;
    }

    public function getNext90DayTotalSubscriptionsRevenue(): ?float
    {
        return $this->container['next_90_day_total_subscriptions_revenue'] ?? null;
    }

    public function getNext30DayShippedSubscriptionUnits(): ?int
    {
        return $this->container['next_30_day_shipped_subscription_units'] ?? null;
    }

    public function getNext60DayShippedSubscriptionUnits(): ?int
    {
        return $this->container['next_60_day_shipped_subscription_units'] ?? null;
    }

    public function getNext90DayShippedSubscriptionUnits(): ?int
    {
        return $this->container['next_90_day_shipped_subscription_units'] ?? null;
    }

    public function getTimeInterval(): ?TimeInterval
    {
        return $this->container['time_interval'] ?? null;
    }

    public function getCurrencyCode(): ?string
    {
        return $this->container['currency_code'] ?? null;
    }

    // Setters
    public function setAsin(?string $asin): void
    {
        $this->container['asin'] = $asin;
    }

    public function setNotDeliveredDueToOOS(?float $value): void
    {
        $this->container['not_delivered_due_to_oos'] = $value;
    }

    public function setTotalSubscriptionsRevenue(?float $value): void
    {
        $this->container['total_subscriptions_revenue'] = $value;
    }

    public function setShippedSubscriptionUnits(?int $value): void
    {
        $this->container['shipped_subscription_units'] = $value;
    }

    public function setActiveSubscriptions(?int $value): void
    {
        $this->container['active_subscriptions'] = $value;
    }

    public function setRevenuePenetration(?float $value): void
    {
        $this->container['revenue_penetration'] = $value;
    }

    public function setLostRevenueDueToOOS(?float $value): void
    {
        $this->container['lost_revenue_due_to_oos'] = $value;
    }

    public function setCouponsRevenuePenetration(?float $value): void
    {
        $this->container['coupons_revenue_penetration'] = $value;
    }

    public function setShareOfCouponSubscriptions(?float $value): void
    {
        $this->container['share_of_coupon_subscriptions'] = $value;
    }

    public function setNext30DayTotalSubscriptionsRevenue(?float $value): void
    {
        $this->container['next_30_day_total_subscriptions_revenue'] = $value;
    }

    public function setNext60DayTotalSubscriptionsRevenue(?float $value): void
    {
        $this->container['next_60_day_total_subscriptions_revenue'] = $value;
    }

    public function setNext90DayTotalSubscriptionsRevenue(?float $value): void
    {
        $this->container['next_90_day_total_subscriptions_revenue'] = $value;
    }

    public function setNext30DayShippedSubscriptionUnits(?int $value): void
    {
        $this->container['next_30_day_shipped_subscription_units'] = $value;
    }

    public function setNext60DayShippedSubscriptionUnits(?int $value): void
    {
        $this->container['next_60_day_shipped_subscription_units'] = $value;
    }

    public function setNext90DayShippedSubscriptionUnits(?int $value): void
    {
        $this->container['next_90_day_shipped_subscription_units'] = $value;
    }

    public function setTimeInterval(?TimeInterval $value): void
    {
        $this->container['time_interval'] = $value;
    }

    public function setCurrencyCode(?string $value): void
    {
        $this->container['currency_code'] = $value;
    }


    /**
     * Gets the string presentation of the object.
     */
    public function __toString(): string
    {
        return (string) \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate(): void {}

    /**
     * Returns true if offset exists. False otherwise.
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     */
    public function offsetSet($offset, $value): void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
